image: node:lts-gallium

cache:
    key: "${CI_COMMIT_REF_SLUG}-client"
    paths:
        - client/node_modules/
        - server/node_modules/
    policy: pull

.only-client: &only-client
    only:
        refs:
            - master
            - merge_requests
            - dev
        changes:
            - client/**/*
    cache:
        key: "${CI_COMMIT_REF_SLUG}-client"
        paths:
            - client/node_modules/
        policy: pull

.only-server: &only-server
    only:
        refs:
            - master
            - merge_requests
            - dev
        changes:
            - server/**/*
    cache:
        key: "${CI_COMMIT_REF_SLUG}-server"
        paths:
            - server/node_modules/
        policy: pull

.only-client_leger: &only_clientleger
    only:
        refs:
            - master
            - merge_requests
            - dev
        changes:
            - client_leger/**/*

stages:
    - install
    - lint
    - build
    - test
    - deploy

install:client:
    stage: install
    <<: *only-client
    script:
        - cd client
        - npm ci --cache .npm --prefer-offline --legacy-peer-deps
    cache:
        key: "${CI_COMMIT_REF_SLUG}-client"
        paths:
            - client/node_modules/
            - client/.npm/
        policy: pull-push

install:server:
    stage: install
    <<: *only-server
    script:
        - cd server
        - npm ci --cache .npm --prefer-offline --legacy-peer-deps
    cache:
        key: "${CI_COMMIT_REF_SLUG}-server"
        paths:
            - server/node_modules/
            - server/.npm/
        policy: pull-push

lint:client:
    stage: lint
    allow_failure: true
    <<: *only-client
    script:
        - cd client
        - npm run lint

lint:server:
    stage: lint
    allow_failure: true
    <<: *only-server
    script:
        - cd server
        - npm run lint

build:client:
    stage: build
    <<: *only-client
    script:
        - cd client
        - npm run build
    artifacts:
        paths:
            - client/dist/
        expire_in: 2 days

build:desktop:
    image: electronuserland/builder:wine-mono
    stage: build
    <<: *only-client
    script:
        - rm -rf /root/.wine
        - winecfg
        - cd client
        - npm run build:electron
    artifacts:
        paths:
            - client/build/
        expire_in: 2 days

build:server:
    stage: build
    <<: *only-server
    script:
        - cd server
        - npm run build
    artifacts:
        paths:
            - server/out/
        expire_in: 2 days

build:client_leger:
    image: "cirrusci/flutter:3.3.1"
    stage: build
    <<: *only_clientleger
    script:
        - cd client_leger
        - flutter pub get
        - flutter build apk --dart-define=ENVIRONMENT=PROD
    artifacts:
        paths:
            - client_leger/build/app/outputs/flutter-apk/app-release.apk
        expire_in: 2 days

#test:client:
#    stage: test
#    <<: *only-client
#    script:
#        - Xvfb :99 -ac -screen 0 1920x1080x24 &
#        - cd client
#        - npm run coverage -- --browsers=ChromeHeadlessNoSandbox --watch=false
#    dependencies:
#        - build:client
#    artifacts:
#        paths:
#            - client/coverage/
#
#test:server:
#    stage: test
#    <<: *only-server
#    script:
#        - cd server
#        - npm run coverage
#    dependencies:
#        - build:server
#    artifacts:
#        paths:
#            - server/coverage/

pages:
    image: node:14.15.0
    stage: deploy
    rules:
        - if: "$CI_COMMIT_TAG =~ /deploy/"
          when: manual
    script:
        - cd client
        - npm ci --cache .npm --prefer-offline --legacy-peer-deps
        - npm run deploy -- --base-href $BASE_HREF
        - mkdir ../public
        - mv dist/client/* ../public/
    artifacts:
        paths:
            - public

deploy:server:
    stage: deploy
    rules:
        - if: "$CI_COMMIT_TAG =~ /deploy/"
          when: manual
    script:
        - "which ssh-agent || (apt-get update -qq && apt-get install -qq openssh-client )"
        - eval $(ssh-agent -s)
        - ssh-add <(echo "$EC2_PEM_FILE_CONTENT")
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
        - |
            timeout 600 ssh -t -o ServerAliveInterval=15 -o ServerAliveCountMax=5 "${EC2_USER}@${EC2_HOST}" "
                set -x -ev

                # Clone the repository
                git clone 'https://${GITLAB_DEPLOY_TOKEN_USERNAME}:${GITLAB_DEPLOY_TOKEN_PASSWORD}@${GITLAB_REPO_URL}' projet3 || echo Git repository already exist
                cd projet3

                # Checkout to the targeted commit
                git fetch --all
                git checkout ${CI_COMMIT_SHA}

                # Build the project
                cd server
                npm ci
                npm run build

                # Force kill any node app or any app running on the server port
                forever stopall && sudo fuser -k '${SERVER_PORT}/tcp' && sudo killall node

                # Launch the server in background and append output to /var/log/messages for CloudWatch
                forever start -a -l /var/log/messages out/index.js
            "

deploy:desktop:
    image: electronuserland/builder:wine-mono
    stage: deploy
    rules:
        -   if: "$CI_COMMIT_TAG =~ /deploy/"
            when: manual
    script:
        - rm -rf /root/.wine
        - winecfg
        - cd client
        - npm ci --legacy-peer-deps
        - npm run build:electron
    artifacts:
        paths:
            - client/build/

deploy:client_leger:
    image: "cirrusci/flutter:3.3.1"
    stage: deploy
    rules:
        -   if: "$CI_COMMIT_TAG =~ /deploy/"
            when: manual
    script:
        - cd client_leger
        - flutter pub get
        - flutter build apk --dart-define=ENVIRONMENT=PROD
    artifacts:
        paths:
            - client_leger/build/app/outputs/flutter-apk/app-release.apk
